@page "/bingo"

@using PictureBingo.Data

@inject BingoService BingoService

<h1>Bingoooo!</h1>
<div class="container">
    <div class="row">
        <div class="col-9">
            <button class="btn btn-primary" disabled=@NoDraw @onclick=DrawNumber>Trek een plaatje</button>
            <div>
                <h2>Laatste plaatje: @LastDrawnNumber?.Name</h2>
                <br />
                @if (LastDrawnNumber != null)
                {
                    <img src=@LastDrawnNumber?.Path class="paw-patrol big" />
                }
            </div>
        </div>
        <div class="col">
            <div id=drawnnumber>
                <p>
                    Getrokken :
                </p>
                <ul>
                    @foreach (var number in drawnNumbers)
                    {
                        <li style="list-style-type:none"><img src=@number.Path class="paw-patrol" /></li>
                    }
                </ul>
            </div>
            Beschikbaar:
            <ul>
                @foreach (var number in availableNumbers)
                {
                    <li>@number.Name</li>
                }
            </ul>
        </div>
    </div>
</div>
@code {
    private bool NoDraw => !CanDraw;

    List<BingoData> availableNumbers;

    IEnumerable<BingoData> drawnNumbers = new List<BingoData>();

    BingoData LastDrawnNumber;

    private bool CanDraw => availableNumbers.Count != 0;

    protected override async Task OnInitializedAsync()
    {
        availableNumbers = await BingoService.GetBingoData();
    }

    private void DrawNumber()
    {
        if (!CanDraw)
            return;

        Random r = new Random();
        var drawnNumber = availableNumbers.OrderBy(n => r.Next()).First();

        drawnNumbers = drawnNumbers.Prepend(drawnNumber);
        availableNumbers.Remove(drawnNumber);
        LastDrawnNumber = drawnNumber;
    }
}