@page "/bingo"

@using PictureBingo.Data

@inject BingoService BingoService

<div class="container">
    <div class="row">
        <div class="col-9">
            <br />
            @if (LastDrawnPicture != null)
            {
                <h2>Laatste plaatje: @CurrentPicture?.Name</h2>
                <img src=@LastDrawnPicture?.Path class="paw-patrol big @AnimateClass" />
            }
        </div>
        <div class="col">
            <button class="btn btn-primary" disabled=@NoDraw @onclick=DrawNumber>Trek een plaatje</button>
            <p>
                Getrokken :
            </p>
            <ul>
                @foreach (var number in drawnNumbers)
                {
                    <li style="list-style-type:none"><img src=@number.Path class="paw-patrol" /></li>
                }
            </ul>
            Beschikbaar:
            <ul>
                @foreach (var number in availableNumbers)
                {
                    <li>@number.Name</li>
                }
            </ul>
        </div>
    </div>
</div>
@code {
    private bool NoDraw => !CanDraw;

    List<BingoData> availableNumbers;

    IEnumerable<BingoData> drawnNumbers = new List<BingoData>();

    BingoData CurrentPicture;

    BingoData LastDrawnPicture;

    private bool CanDraw => availableNumbers.Count != 0;

    private string AnimateClass = "";

    protected override async Task OnInitializedAsync()
    {
        availableNumbers = await BingoService.GetBingoData();
    }

    private async Task DrawNumber()
    {
        if (!CanDraw)
            return;

        Random r = new Random();
        var drawnNumber = availableNumbers.OrderBy(n => r.Next()).First();

        availableNumbers.Remove(drawnNumber);
        LastDrawnPicture = drawnNumber;
        AnimateClass = "paw-patrol-incoming";
        await ResetAnimation(5_000);
    }

    private Task ResetAnimation(int ms)
    {
        return Task.Run(() =>
            {
            System.Threading.Thread.Sleep(ms);
            AnimateClass = "";
            CurrentPicture = LastDrawnPicture;
            drawnNumbers = drawnNumbers.Prepend(CurrentPicture);
        });
    }
}